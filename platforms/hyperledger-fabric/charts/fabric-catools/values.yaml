##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################
global:
  #Provide the service account name which will be created.
  serviceAccountName: vault-auth  
  cluster:
    provider: aws  # choose from: minikube | aws | azure | gcp
    cloudNativeServices: false # only 'false' is implemented
  vault:
    #Provide the type of vault
    #Eg. type: hashicorp
    type: hashicorp
    #Provide the vaultrole for an organization
    #Eg. vaultrole: supplychain-vault-role
    role: vault-role
    #Provide the vault server address
    #Eg. vaultaddress: http://Vault-884963190.eu-west-1.elb.amazonaws.com
    address:
    #Provide the kubernetes auth backed configured in vault for an organization
    #Eg. authpath: supplychain
    authPath: supplychain
    #Provide the secret engine.
    secretEngine: secretsv2
    #Provide the vault path where the secrets will be stored
    secretPrefix: "data/supplychain"
    #Provide the imagesecretname for vault
    #Eg. imagesecretname: regcred
    imageSecretName: ""

  proxy:
    #This will be the proxy/ingress provider. Can have values "haproxy" or "none"
    #Eg. provider: "haproxy"
    provider: haproxy
    #This field specifies the external url for the organization
    #Eg. externalUrlSuffix: test.blockchaincloudpoc.com
    externalUrlSuffix: test.blockchaincloudpoc.com

# Provide the number of replica pods
replicaCount: 1

image:
  #Provide the image name for the server container
  #Eg. image: hyperledger/fabric-ca-tools
  caTools: ghcr.io/hyperledger/bevel-fabric-ca:latest
  # Provide image pull policy
  pullPolicy: IfNotPresent
  #Provide the valid image name and version to read certificates from vault server
  #Eg.alpineutils: ghcr.io/hyperledger/bevel-alpine:latest
  alpineUtils: ghcr.io/hyperledger/bevel-alpine:latest

storage:
  #Provide the size for CA
  #Eg. size: 512Mi
  size: 512Mi

healthCheck: 
  # The amount of times to retry fetching from/writing to Vault before giving up.
  # Eg. retries: 10
  retries: 10
  # The amount of time in seconds to wait after an error occurs when fetching from/writing to Vault.
  # Eg. sleepTimeAfterError: 15  
  sleepTimeAfterError: 15

orgData:
  #Provide organization's name in lowercases
  #Eg. orgName: supplychain 
  orgName: supplychain
  #Provide organization's type (orderer or peer)
  #Eg. component_type: orderer
  type:
  #Provide organization's subject
  #Eg. "O=Orderer,L=51.50/-0.13/London,C=GB"
  componentSubject:
  #Provide organization's subject
  #Eg. "O=Orderer,L=51.50/-0.13/London,C=GB"
  certSubject:
  #Provide organization's country
  #Eg. UK
  componentCountry: UK
  #Provide organization's state
  #Eg. London
  componentState: London
  #Provide organization's location
  #Eg. Lodon
  componentLocation: Lodon

#Provide orderer's names
orderers:
  - orderer1   
  - orderer2 
  - orderer3
  
#Provide peer's names
peers:
  - peer0

users: 
    # Generating User Certificates with custom attributes using Fabric CA in Bevel for Peer Organizations
    usersList:
      - user:
        identity: user1
        attributes:
        - key: "hf.Revoker"
          value: "true"
      - user:
        identity: user2
        attributes:
        - key: "hf.Revoker"
          value: "true"
    #Base64 encoded list of users
    #Eg. IC0gdXNlcjoKICAgICAgICAgIGlkZW50aXR5OiB1c2VyMQogICAgICAgICAgYXR0cmlidXRlczoKICAgICAgICAgICAgLSBrZXk6IGtleTEKICAgICAgIgICAgICAgIC0ga2V5OiBrZXkyCiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlMgogICAgICAgIC0gdXNlcjoKICAgICAgICAgIGlkZW50aXR5OiB1c2VyMgogICAgICAgICAgYXR0cmlidXRlczoKICAgICAgICAgICAgLSBrZXk6IGtleTEKICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUxCiAgICAgICAgICAgIC0ga2V5OiBrZXkzCiAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlMw==
    usersListAnsible:
    #Provides a list of user identities
    usersIdentities:
      - user1
      - user2

checks:
  #Provides the need to refresh user certificates
  refreshCertValue: false
  #Add a peer to an existing network
  addPeerValue: False

labels:
  service: []
  pvc: []
  deployment: []
