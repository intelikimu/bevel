# Set enode_data_list to empty
- name: Set enode_data_list to []
  set_fact:
    enode_data_list: []

# Set node status
- name: Set node status
  set_fact:
    node_status: default
  when: network.config.genesis | default('', true) | trim == ''

# Set node status
- name: Set node status
  set_fact:
    node_status: additional
  when: network.config.genesis | default('', true) | trim != ''

# Get enode data for all orgs
- name: Get enode data for each node of all organization
  include_tasks: enode_data.yaml
  loop: "{{ network['organizations'] }}"
  loop_control:
    loop_var: org

# This task adds a new node to the existing network
- name: Adds a new node to the existing network
  shell: |
    curl -X POST http://{{ geth_data.url }}:{{ geth_data.rpcport }} --data '{"jsonrpc":"2.0","method":"raft_addPeer","params": ["enode://{{ enode.enodeval }}@{{ enode.peer_name }}.{{ external_url }}:{{ enode.p2p_ambassador }}?discport=0&raftport={{ enode.raft_ambassador }}"], "id":{{ geth_data.nodeid }} }' --header "Content-Type: application/json"
  loop: "{{ enode_data_list }}"
  loop_control:
    loop_var: enode
  register: peer_id
  when: network.config.genesis | default('', true) | trim != '' and network.config.consensus == 'raft'

# This task fetches the peer_id 
- name: Get peer_id
  set_fact:
    peer_id: "{{ peer_id.results[0].stdout | from_json | json_query('result') }}"
  when: network.config.genesis | default('', true) | trim != '' and network.config.consensus == 'raft'

# This task creates the Tessera Transaction Manager value files for each node of organization
- name: Create value file for Tessera TM for each node
  include_role:
    name: helm_component
  vars:
    component_name: "{{ name }}{{ peer.name }}tessera"
    type: "tessera"
    genesis: "{{ lookup('file', '{{ build_path }}/genesis.json') | b64encode }}"
  loop: "{{ peers }}"
  loop_control:
    loop_var: peer
  when: network.config.genesis | default('', true) | trim == ''

# This task creates the Tessera Transaction Manager value files for each node of organization
- name: Create value file for Tessera TM for each node
  include_role:
    name: helm_component
  vars:
    component_name: "{{ name }}{{ peer.name }}tessera"
    type: "tessera"
    genesis: "{{ network.config.genesis }}"
  loop: "{{ peers }}"
  loop_control:
    loop_var: peer
  when: network.config.genesis | default('', true) | trim != '' and network.config.consensus == 'raft'

# This task creates the Tessera Transaction Manager value files for each node of organization
- name: Create value file for Tessera TM for each node
  include_role:
    name: helm_component
  vars:
    component_name: "{{ name }}{{ peer.name }}tessera"
    type: "tessera"
    genesis: "{{ network.config.genesis }}"
  loop: "{{ peers }}"
  loop_control:
    loop_var: peer
  when: network.config.genesis | default('', true) | trim != '' and network.config.consensus == 'ibft'


# Git Push : Pushes the above generated files to git directory 
- name: Git Push
  include_role: 
    name: "{{ playbook_dir }}/../../shared/configuration/roles/git_push"
  vars:
    GIT_DIR: "{{ playbook_dir }}/../../../"
    GIT_REPO: "{{ item.gitops.git_push_url }}"
    GIT_USERNAME: "{{ item.gitops.username }}"
    GIT_EMAIL: "{{ item.gitops.email }}"
    GIT_PASSWORD: "{{ item.gitops.password }}"
    GIT_BRANCH: "{{ item.gitops.branch }}"
    GIT_RESET_PATH: "platforms/quorum/configuration"
    msg: "Pushing Peer files"
