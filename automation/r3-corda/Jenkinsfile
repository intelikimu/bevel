pipeline {
    agent { label 'ansible' } //use slave with ansible
    
    environment {
        //Define common variables
        GITOPS_REPO="github.com/hyperledger-labs/blockchain-automation-framework.git"
        GITOPS_SSH="ssh://git@github.com/hyperledger-labs/blockchain-automation-framework.git"
        REL_PATH_CORDA="platforms/r3-corda/releases/dev"
        CHART_PATH="platforms/r3-corda/charts"
        GIT_CREDS="blockofz_serviceuser"

        ROOT_DIR="${pwd()}"
        KUBECONFIG="${pwd()}/platforms/r3-corda/configuration/kubernetes/kube.yaml"
        KUBECONTEXT="dltplatform-cluster-sprint6"
        DOCKER_REGISTRY = "adopblockchaincloud0502.azurecr.io"
        DOCKER_CREDS = 'azure_registry_creds'
        DOCKER_USERNAME = 'ADOPBlockchainCloud0502'
        DOCKER_PASSWORD = credentials('azure_container_password')        
    }
    
    parameters {
        string(defaultValue: "http://a64bbc8b9a2fe11e9b2b502974b46021-2041891849.eu-west-2.elb.amazonaws.com:9000", description: 'Vault Server address?', name: 'VAULT_ADDR')
        password(defaultValue: "", description: 'Vault root token?', name: 'VAULT_TOKEN')
        choice(choices: 'Yes\nNo', description: 'New Release?', name: 'RELEASE_NEW')
        string(defaultValue: "release/corda0200", description: 'GitOps Release Branch', name: 'RELEASE_BRANCH')
        choice(choices: 'No\nYes', description: 'Delete All Existing Network?', name: 'RESET_ACTION')
        string(defaultValue: "", description: 'Tag number for git', name: 'TAG_NUMBER')
    }

    stages {

        stage('Get K8 configs from terraform job') {
            steps {
                sh 'ls -lat platforms/r3-corda/configuration'
                copyArtifacts filter: 'kubernetes/*', fingerprintArtifacts: true, projectName: 'deploy-infra-aws', selector: lastSuccessful(), target: 'platforms/r3-corda/configuration'
                sh 'pwd; ls -lat platforms/r3-corda/configuration/kubernetes'
            }
        }


        stage('Replace secrets and values in Network configuration file') {
            steps{
                withCredentials([
                     usernamePassword(credentialsId: "${GIT_CREDS}", 
                     usernameVariable: 'GIT_USER',
                     passwordVariable: 'GIT_PASSWORD'
                )]) {
                    script {
                        env.encodedGitName=URLEncoder.encode(GIT_USER, "UTF-8")
                        env.encodedGitPass=URLEncoder.encode(GIT_PASSWORD, "UTF-8")
                        echo "Username for GIT: ${env.encodedGitName}"
                    }
                    // Replace the sample corda network.yaml and fill in required parameters
                    dir('platforms/r3-corda/configuration/samples'){
                        sh """
                            cp network-cordav2.yaml network.yaml
                            sed -i -e 's+docker_url+${DOCKER_REGISTRY}+g' network.yaml
                            sed -i -e 's+docker_username+${DOCKER_USERNAME}+g' network.yaml
                            sed -i -e 's*docker_password*${DOCKER_PASSWORD}*g' network.yaml                                                      
                            sed -i -e 's+vault_addr+${params.VAULT_ADDR}+g' network.yaml
                            sed -i -e 's+vault_root_token+${params.VAULT_TOKEN}+g' network.yaml
                            sed -i -e 's+gitops_ssh_url+${GITOPS_SSH}+g' network.yaml                            
                            sed -i -e 's+gitops_push_url+${GITOPS_REPO}+g' network.yaml
                            sed -i -e 's+git_username+${env.encodedGitName}+g' network.yaml
                            sed -i -e 's+git_password+${env.encodedGitPass}+g' network.yaml
                            sed -i -e 's+gitops_branch+${params.RELEASE_BRANCH}+g' network.yaml
                            sed -i -e 's+gitops_release_dir+${REL_PATH_CORDA}+g' network.yaml
                            sed -i -e 's+gitops_charts+${CHART_PATH}+g' network.yaml
                            sed -i -e 's+cluster_context+${KUBECONTEXT}+g' network.yaml
                            sed -i -e 's+cluster_config+${KUBECONFIG}+g' network.yaml
                            sed -i -e 's+home_dir+${ROOT_DIR}+g' network.yaml
                        """
                    }
                }
            }
        }

        stage('Environment Set-up Ansible') {
            steps {
                //Withcredentials is needed when connecting to AWS EKS
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'terraform_user',
                    accessKeyVariable: 'ACCESS_KEY',
                    secretKeyVariable: 'SECRET_KEY'
                ]]) {
                    // Replace the sample corda network.yaml and fill in required parameters
                    dir('platforms/r3-corda/configuration/samples'){
                        sh """
                            sed -i -e 's+aws_access_key+${ACCESS_KEY}+g' network.yaml
                            sed -i -e 's+aws_secret_key+${SECRET_KEY}+g' network.yaml
                            
                        """
                    }
                    sh """                        
                        git --version
                        ansible --version
                        ansible-playbook ./platforms/shared/configuration/environment-setup.yaml -vvv -e "@./platforms/r3-corda/configuration/samples/network.yaml"
                    """
                }
            }
        }

       // Stage to Install and configure flux on kubernetes cluster 
        stage('Configure Flux') {
            steps {
               sh """
                    git checkout "${params.RELEASE_BRANCH}"
                    ansible-playbook ./platforms/shared/configuration/kubernetes-env-setup.yaml -v -e "@./platforms/r3-corda/configuration/samples/network.yaml"
                """
            }
        }
        

        // Playbook to  deploy corda network by providing components.yaml as input variable
        stage('Deploy Corda Network') {
            steps {
                sh """
                    ansible-playbook platforms/r3-corda/configuration/deploy-network.yaml -v -e "@./platforms/r3-corda/configuration/samples/network.yaml"
                """
            }
        }   
  

        stage('Tag release branch') {
            when {
                expression {
                    params.RELEASE_NEW.toLowerCase() == 'yes'
                }
            }
            steps {
                withCredentials([
                     usernamePassword(credentialsId: "${GIT_CREDS}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD'
                 )]) {
                    sh """
                        git config --global user.email "baf@accenture.com"
                        git config --global user.name ${username}
                        git tag -a v0.1.${params.TAG_NUMBER} -m "Tagging from Jenkins"
                        git push https://${username}:${password}@${GITOPS_REPO} v0.1.${params.TAG_NUMBER}
                    """
                 }
            }
        }
    }
}